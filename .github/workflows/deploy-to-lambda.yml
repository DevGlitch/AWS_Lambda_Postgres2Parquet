name: ðŸš€ Deploy to AWS Lambda

on:
  # Uncomment any of the following lines to trigger the workflow based on your needs

  # Trigger the workflow on push or pull request,
#  push:
#    branches:
#      - main

  # Trigger the workflow on a schedule,
#  schedule:
#      - cron: '0 0 * * *' # Run every day at midnight UTC

  # Allows you to trigger this workflow manually from the Actions tab
  workflow_dispatch:

# Allow only one workflow run at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: ðŸ›’ Checkout
        uses: actions/checkout@v2

      - name: ðŸ“¦ Install AWS CLI
        run: |
          # Install the AWS CLI
          curl "https://d1vvhvl2y92vvt.cloudfront.net/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
        if: success() # Only run this step if the previous steps were successful

      - name: Configure AWS CLI
        run: |
          # AWS credentials for AWS CLI which are stored in GitHub Secrets of the repository
          aws configure set region us-east-1
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ðŸš€ Deploy & Publish to AWS Lambda
        run: |
          LAMBDA_FUNCTION_NAME="Postgres2Parquet"
          SOURCE_FILE="lambda_function.py"
          QUERY_FILE="query.sql"
          
          # Deploy the Python file and query.sql to Lambda
          zip deployment.zip $SOURCE_FILE $QUERY_FILE
          aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --zip-file fileb://deployment.zip
          
          # Check the status of the update
          while true; do
            status=$(aws lambda get-function-configuration --function-name $LAMBDA_FUNCTION_NAME --query 'LastUpdateStatus' --output text)
            if [ "$status" = "Successful" ]; then
              break  # Exit the loop when the update is successful
            elif [ "$status" = "Failed" ]; then
              echo "Lambda function update failed."
              exit 1
            else
              sleep 5  # Sleep for 5 seconds before checking again
            fi
          done
          
          # Publish a new version of the Lambda function
          aws lambda publish-version --function-name $LAMBDA_FUNCTION_NAME

      - name: ðŸ“¦ Update Lambda Layer
        run: |
          LAMBDA_FUNCTION_NAME="Postgres2Parquet"
          LAYER_NAME="python-dependencies"

          # Install pipenv
          pip install pipenv

          # Create a virtual environment and export requirements
          pipenv install --deploy --ignore-pipfile
          pipenv lock -r > requirements.txt

          # Package Lambda Layer
          mkdir python
          pipenv lock -r > python/requirements.txt
          zip -r my_lambda_layer.zip python/

          # Check if the layer exists and get its ARN
          layer_arn=$(aws lambda list-layers --query "Layers[?LayerName=='$LAYER_NAME'].LatestMatchingVersion.LayerVersionArn" --output text)

          if [ -z "$layer_arn" ]; then
            # Layer does not exist, create it
            aws lambda publish-layer-version \
                --layer-name $LAYER_NAME \
                --description "Python Dependencies Layer" \
                --compatible-runtimes python3.10 \
                --license-info "MIT" \
                --zip-file fileb://my_lambda_layer.zip
          else
            # Layer exists, update it using the latest version number
            latest_version=$(aws lambda list-layer-versions --layer-name $LAYER_NAME --query "max_by(LayerVersions, &Version).Version" --output text)
          
            aws lambda update-function-layer-configuration \
                --function-name $LAMBDA_FUNCTION_NAME \
                --layer-name $LAYER_NAME \
                --compatible-runtimes python3.10

            aws lambda update-layer-version-code \
                --layer-name $LAYER_NAME \
                --version-number <LATEST_LAYER_VERSION_NUMBER> \
                --zip-file fileb://my_lambda_layer.zip
          fi
        if: success() # Only run this step if the previous steps were successful
